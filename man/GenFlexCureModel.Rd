% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/GenFlexCureModel.R
\name{GenFlexCureModel}
\alias{GenFlexCureModel}
\title{Fit generalized mixture cure model}
\usage{
GenFlexCureModel(formula, data, smooth.formula = NULL, smooth.args = NULL,
  df = 3, tvc = NULL, tvc.formula = NULL, bhazard = NULL,
  cr.formula = ~1, type = "mixture", link.type.cr = c("logit", "loglog",
  "identity", "probit"), link.type = c("PH", "PO", "probit", "AH", "AO"),
  init = NULL, timeVar = "", covariance = T, verbose = T,
  control = list(maxit = 10000, method = c("Nelder-Mead")),
  ini.types = c("cure", "flexpara"), cure = FALSE)
}
\arguments{
\item{formula}{Formula for modelling the survival of the uncured. A linear term for time-varying coefficients is required here.
Reponse has to be of the form \code{Surv(time, status)}.}

\item{data}{Data frame in which to interpret the variables names in \code{formula}, \code{smooth.formula}.}

\item{smooth.formula}{Formula for describing the time-effect of the survival of the uncured (default is \code{NULL}).}

\item{smooth.args}{List. Optional arguments to the time-effect of the survival of the uncured (default is \code{NULL}).}

\item{df}{Integer. Degrees of freedom (default is 3) for the time-effect of the survival of the uncured.}

\item{tvc}{Name list of integers. Specifies the degrees of freedom for a time-varying covariate effect.
For instance, \code{tvc = list(a = 3)} creates a time-varying spline-effect of the covariate a with 3 degrees of freedom.}

\item{tvc.formula}{Formula for the time-varying covariate effects.
For time-varying effects, a linear term of the covariate has to be included in \code{formula}.}

\item{bhazard}{Background hazard.}

\item{cr.formula}{Formula for the cure rate.
The left hand side of the formula is not used and should therefore not be specified.}

\item{type}{A character indicating the type of cure model.
Possible values are \code{mixture} (default) and \code{nmixture}.}

\item{link.type.cr}{Character giving the link function selected for the cure rate.
Possible values are \code{logit} (default), \code{loglog}, \code{identity}, and \code{probit}.}

\item{link.type}{Character giving the link function selected for the survival of the uncured.
Possible values are \code{PH} (default), \code{PO}, \code{probit}, \code{AH}, and \code{AO}.}

\item{init}{Providing initial values for the optimization procedure.
If not specified, the function will create initial values internally.}

\item{timeVar}{Character giving the name of the variable specifying the time component of the \code{Surv} object.}

\item{covariance}{Logical. If \code{TRUE} (default), the covariance matrix is computed.}

\item{verbose}{Logical. If \code{TRUE} status messages of the function is outputted.}

\item{control}{Named list with additional arguments passed to \code{optim}.}

\item{ini.types}{Character vector denoting the executed schemes for computing initial values.}

\item{cure}{Logical. Indicates whether a cure model specification is needed for the survival of the uncured.
This is usually \code{FALSE} (default).}
}
\value{
An object of class \code{gfcm}.
}
\description{
The following function fits a generalized mixture or non-mixture cure model
using a link function for the cure rate and for the survival of the uncured, i.e.,
\deqn{R(t|z) = \pi(z) + (1 - \pi(z)) S_u(t|z)},
where
\deqn{g_1[S_u(t|z)] = \eta_1(z) and g_2(\pi(z)) = \eta_2(z)}.
This function deviates from \code{FlexCureModel} in its use of formulas,
which allows the use of more smoothers than the restricted cubic splines from the \code{flexsurv} package.
}
\details{
This functions generalizes the \code{FlexCureModel} function using formulas.
The default smoother is natural cubic splines established by the \code{rstpm2::nsx} function.
Functions such as \code{ns}, \code{bs} are readily available for usage. Also the \code{basis} function of \code{flexsurv} works.
The function also allows for the use of any smoother from the \code{mgvc} package.
}
\examples{
##Use data cleaned version of the colon cancer data from the rstpm2 package
data("colonDC")

##Extract general population hazards
colonDC$bhaz <- general.haz(time = "FU", age = "agedays", sex = "sex", year = "dx",
                            data = colonDC, ratetable = survexp.dk)

###Without covariates
##Fit mixture cure model
fit <- GenFlexCureModel(Surv(FUyear, status) ~ 1, data = colonDC, df = 4, bhazard = "bhaz")

##Plot model
plot(fit)
plot(fit, time = seq(0.001, 40, length.out = 100))
plot(fit, type = "hazard")
plot(fit, type = "survuncured")
plot(fit, type = "probcure")

##Predict cure rate
predict(fit, type = "curerate")


##Fit non-mixture cure model
fit <- GenFlexCureModel(Surv(FUyear, status) ~ 1, data = colonDC, df = 4,
                        bhazard = "bhaz", type = "nmixture")

##Plot relative survival
plot(fit)

##Predict cure rate
predict(fit, type = "curerate")

###With covariates
##Fit mixture cure model
fit <- GenFlexCureModel(Surv(FUyear, status) ~ sex, data = colonDC, df = 4, bhazard = "bhaz", cr.formula = ~ sex)

##Plot model
plot(fit, newdata = data.frame(sex = factor("female", levels = c("male", "female"))),
     time = seq(0.001, 15, length.out = 100), ci = "n")
plot(fit, newdata = data.frame(sex = factor("male", levels = c("male", "female"))),
     time = seq(0.001, 15, length.out = 100), col = 2, ci = "n", add = T)


plot(fit, newdata = data.frame(sex = factor("female", levels = c("male", "female"))),
     time = seq(0.001, 15, length.out = 100), ci = "n", type = "survuncured")
plot(fit, newdata = data.frame(sex = factor("male", levels = c("male", "female"))),
     time = seq(0.001, 15, length.out = 100), col = 2, ci = "n", add = T, type = "survuncured")

predict(fit, type = "curerate", data.frame(sex = factor("female", levels = c("male", "female"))))


##Fit mixture cure model with time-varying covariates
fit <- GenFlexCureModel(Surv(FUyear, status) ~ age, data = colonDC, df = 4, bhazard = "bhaz",
                        cr.formula = ~ age, tvc = list(age = 2))

##Plot model
plot(fit, newdata = data.frame(age = 70))
plot(fit, newdata = data.frame(age = 60), add = T, col = 2)

plot(fit, type = "hazard", newdata = data.frame(age = 70), ci = "n")
plot(fit, type = "hazard", newdata = data.frame(age = 60), add = T, col = 2, ci = "n")
}
